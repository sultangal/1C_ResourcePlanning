//TODO: Реализовать проверку пересечений с производственным календарем
//При уменьшении сроков проекта, интервалы могут стать невалидными, надо проработать этот вопрос
//Реализовать сохранение в регистры при проведении
//Реализовать валидацию стадий проекта
#Область ОписаниеПеременных
&НаКлиенте
Перем ПредыдущаяДатаНачалаИнтервала;
&НаКлиенте
Перем ПредыдущаяДатаКонцаИнтервала;
&НаКлиенте
Перем ТекущаяДата;
&НаКлиенте
Перем ПредыдущаяДатаНачалаПроекта;
&НаКлиенте
Перем ПредыдущаяДатаОкончанияПроекта;
&НаКлиенте
Перем ПредыдущаяДатаНачалаСтадии;
#КонецОбласти
#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбнулимВсеПризнаки();
	ПроверкаПересеченияСотрудниковСГрафикомОтпусков();
	УстановитьУсловноеОформлениеСтрокиИнтервалов();
	ИнициализироватьДиаграммуГанта();
	ОпределитьТекущийСтатусПроекта();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РуководительПроектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, ВернутьДолжностьРуководительПроекта(),
		Элементы.РуководительПроекта);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	//Если значение пустое
	Если Объект.ДатаНачала = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	//Если пытаемся править задним числом
	Если Не ПредыдущаяДатаНачалаПроекта = Дата('00010101') И ПредыдущаяДатаНачалаПроекта < НачалоДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение( , "Нельзя править дату проекта задним числом!");
		Объект.ДатаНачала = ПредыдущаяДатаНачалаПроекта;
		Возврат;
	КонецЕсли;
	//Если текущее значение меньше текущего дня
	Если Объект.ДатаНачала < НачалоДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение( , "Дата начала проекта не должна быть меньше текущей даты!");
		Объект.ДатаНачала = ПредыдущаяДатаНачалаПроекта;
		Возврат;
	КонецЕсли;
	//Если дата начала больше даты окончания
	Если Не Объект.ДатаОкончания = Дата('00010101') И Объект.ДатаНачала >= Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение( , "Дата начала проекта не должна быть больше даты окончания!");
		Объект.ДатаНачала = ПредыдущаяДатаНачалаПроекта;
		Возврат;
	КонецЕсли;

	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	//Если значение пустое
	Если Объект.ДатаОкончания = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	//Если пытаемся править задним числом
	Если Не ПредыдущаяДатаОкончанияПроекта = Дата('00010101') И ПредыдущаяДатаОкончанияПроекта < НачалоДня(
		ТекущаяДата()) Тогда
		ПоказатьПредупреждение( , "Нельзя править дату проекта задним числом!");
		Объект.ДатаОкончания = ПредыдущаяДатаОкончанияПроекта;
		Возврат;
	КонецЕсли;
	//Если текущее значение меньше текущего дня
	Если Объект.ДатаОкончания < НачалоДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение( , "Дата окончания проекта не должна быть меньше текущей даты!");
		Объект.ДатаОкончания = ПредыдущаяДатаОкончанияПроекта;
	КонецЕсли;
	//Если дата окончания меньше даты начала
	Если Не Объект.ДатаНачала = Дата('00010101') И Объект.ДатаОкончания <= Объект.ДатаНачала Тогда
		ПоказатьПредупреждение( , "Дата окончания проекта не должна быть меньше даты начала!");
		Объект.ДатаОкончания = ПредыдущаяДатаОкончанияПроекта;
		Возврат;
	КонецЕсли;

	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ПредыдущаяДатаНачалаПроекта = Объект.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаНачалаПроекта = Объект.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ПредыдущаяДатаОкончанияПроекта = Объект.ДатаОкончания;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаОкончанияПроекта = Объект.ДатаОкончания;
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандаПроекта
&НаКлиенте
Процедура КомандаПроектаСотрудникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Элементы.КомандаПроекта.ТекущиеДанные.Должность,
		Элементы.КомандаПроектаСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаСотрудникПриИзменении(Элемент)
//TODO: Надо проверить есть ли уже такой сотрудник в списке, 
//если есть не позволять добавить или вообще убрать из вариантов выбора
//	ТекущиеДанные = Элементы.КомандаПроекта.ТекущиеДанные;
//	ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(ТекущиеДанные.Сотрудник,
//										ТекущиеДанные.ПересекаетсяЛиСГрафикомОтпусков);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаДолжностьПриИзменении(Элемент)
//	Очищаем сотрудника и метку пересечения, т.к. надо будет заново выбирать сотрудника 
//	в соответствии с введенной должностью 
	Элементы.КомандаПроекта.ТекущиеДанные.Сотрудник = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриИзменении(Элемент)
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Проверяем если добавляется новая запись
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.КомандаПроекта.ТекущиеДанные.ИД = Новый УникальныйИдентификатор;
	КонецЕсли;
	//---------------------------------------
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриАктивизацииСтроки(Элемент)
	ОтсортироватьТаблицуИнтервалов();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПередУдалением(Элемент, Отказ)
	//Запрашиваем подтверждение перед удалением сотрудника
	Отказ = Истина;
	СписокВыделенныхСтрокДляУдаления = Новый СписокЗначений;
	СписокВыделенныхСтрокДляУдаления.ЗагрузитьЗначения(Элемент.ВыделенныеСтроки);
	МассивИдентификаторовВыделенныхСтрокДляУдаления = Новый Массив;
	Для Каждого Строка Из СписокВыделенныхСтрокДляУдаления Цикл
		Элементы.КомандаПроекта.ТекущаяСтрока = Строка.Значение;
		ИдентификаторУдаляемойСтроки = Элементы.КомандаПроекта.ТекущиеДанные.ПолучитьИдентификатор();
		МассивИдентификаторовВыделенныхСтрокДляУдаления.Добавить(ИдентификаторУдаляемойСтроки);
	КонецЦикла;
	ПараметрыОповещения = Новый Структура("МассивИдентификаторовВыделенныхСтрокДляУдаления",
		МассивИдентификаторовВыделенныхСтрокДляУдаления);
	ОповещениеПриОтветеНаВопрос = Новый ОписаниеОповещения("РезультатОтветаНаВопросОбУдаленииСотрудника", ЭтотОбъект,
		ПараметрыОповещения);
	ПоказатьВопрос(ОповещениеПриОтветеНаВопрос, "Вы действительно хотите удалить сотрудника?",
		РежимДиалогаВопрос.ДаНет, , , );
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриАктивизацииПоля(Элемент)
	ОтсортироватьТаблицуИнтервалов();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриАктивизацииЯчейки(Элемент)
	ОтсортироватьТаблицуИнтервалов();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыИнтервалыЗанятостиСотрудников
&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Проверяем если добавляется новая запись
	Если НоваяСтрока И Не Копирование Тогда
		//Назначаем ИДшку
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.ИД = Элементы.КомандаПроекта.ТекущиеДанные.ИД;
	КонецЕсли;
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПослеУдаления(Элемент)
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковНачалоИнтервалаПриИзменении(Элемент)
	//--Проверяем значение интервала на валидность--

	Если Не ПервичнаяВалидацияДаты(Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала,
		ПредыдущаяДатаНачалаИнтервала) Тогда
		Возврат;
	КонецЕсли;
	
	//--Блок кода когда второе значение интервала не пустое--
	
	//Если вторая дата пустая - назад
	Если Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;

	//Если начало больше конца
	НачалоИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала;
	Если НачалоИнтервала > Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала Тогда
		ПоказатьПредупреждение( , "Начало интервала не должно быть больше конца интервала!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала = ПредыдущаяДатаНачалаИнтервала;
		Возврат;
	КонецЕсли;

	//Проверяем пересечения с другими интервалами
	Если ПроверитьПересеченияИнтерваловСотрудника(Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные) Тогда
		ПоказатьПредупреждение( , "Интервал пересекается с другими интервалами сотрудника!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала = ПредыдущаяДатаНачалаИнтервала;
		Возврат;
	КонецЕсли;
	//-----------------------------------------------------------------------
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковКонецИнтервалаПриИзменении(Элемент)
	//--Проверяем значение интервала на валидность--

	Если Не ПервичнаяВалидацияДаты(Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала,
		ПредыдущаяДатаКонцаИнтервала) Тогда
		Возврат;
	КонецЕсли;
	
	//--Блок кода когда второе значение интервала не пустое--
	
	//Если вторая дата пустая - назад
	Если Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;

	//Если конец меньше начала
	КонецИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала;
	Если КонецИнтервала < Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала Тогда
		ПоказатьПредупреждение( , "Конец интервала не должен быть меньше начала интервала!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = ПредыдущаяДатаКонцаИнтервала;
		Возврат;
	КонецЕсли;

	//Проверяем пересечения с другими интервалами
	Если ПроверитьПересеченияИнтерваловСотрудника(Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные) Тогда
		ПоказатьПредупреждение( , "Интервал пересекается с другими интервалами сотрудника!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = ПредыдущаяДатаКонцаИнтервала;
		Возврат;
	КонецЕсли;
	//-----------------------------------------------------------------------
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПриИзменении(Элемент)
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковНачалоИнтервалаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаНачалаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковНачалоИнтервалаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
	СтандартнаяОбработка)
	ПредыдущаяДатаНачалаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковКонецИнтервалаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
	СтандартнаяОбработка)
	ПредыдущаяДатаКонцаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковКонецИнтервалаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаКонцаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПриАктивизацииСтроки(Элемент)
	ОтсортироватьТаблицуИнтервалов();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтадииПроекта
&НаКлиенте
Процедура СтадииПроектаПриИзменении(Элемент)
	ЗаполнитьМеткиСтадийПроектаВДиаграмме();
	ОпределитьТекущийСтатусПроекта();
КонецПроцедуры

&НаКлиенте
Процедура СтадииПроектаНачалоСтадииПриИзменении(Элемент)
	ПервичнаяВалидацияДаты(Элементы.СтадииПроекта.ТекущиеДанные.НачалоСтадии, ПредыдущаяДатаНачалаСтадии);
	Объект.СтадииПроекта.Сортировать("НачалоСтадии");
КонецПроцедуры

&НаКлиенте
Процедура СтадииПроектаНачалоСтадииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ПредыдущаяДатаНачалаСтадии = Элементы.СтадииПроекта.ТекущиеДанные.НачалоСтадии;
КонецПроцедуры

&НаКлиенте
Процедура СтадииПроектаНачалоСтадииИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаНачалаСтадии = Элементы.СтадииПроекта.ТекущиеДанные.НачалоСтадии;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ОпределитьТекущийСтатусПроекта()
	Перем ТекущаяСтадия;
	ТекущаяДата = НачалоДня(ТекущаяДата());
	Если ТекущаяДата >= Объект.ДатаОкончания Тогда
		ТекущийСтатусПроекта = Перечисления.СтадииПроекта.Завершен;
		Возврат;
	КонецЕсли;
	Для Каждого Стадия Из Объект.СтадииПроекта Цикл
		Если ТекущаяДата >= Стадия.НачалоСтадии Тогда
			ТекущаяСтадия = Стадия;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекущийСтатусПроекта = ТекущаяСтадия.Стадия;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСтрокиИнтервалов()

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);

	ЭлементУсловия                = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ИнтервалыЗанятостиСотрудников.ПризнакПересеченияСОтпуском");
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.Использование  = Истина;

	ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИнтервалыЗанятостиСотрудников");

КонецПроцедуры

&НаКлиенте
Процедура ОбнулимВсеПризнаки()
	//Признак пересечения с отпуском
	Для Каждого Интервал Из Объект.ИнтервалыЗанятостиСотрудников Цикл
		Интервал.ПризнакПересеченияСОтпуском = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверкаПересеченияСотрудниковСГрафикомОтпусков()
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусков.НачалоПериода КАК НачалоПериода,
	|	ИсторияГрафикаОтпусков.КонецПериода КАК КонецПериода,
	|	ИсторияГрафикаОтпусков.Сотрудник КАК Сотрудник,
	|	ИсторияГрафикаОтпусков.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусков.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ИсторияГрафикаОтпусков.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков КАК ИсторияГрафикаОтпусков
	|ГДЕ
	|	ИсторияГрафикаОтпусков.НачалоПериода <= &ДатаНачалаПроекта
	|	И ИсторияГрафикаОтпусков.НачалоПериода <= &ДатаОкончанияПроекта
	|	И ИсторияГрафикаОтпусков.КонецПериода >= &ДатаНачалаПроекта
	|	И ИсторияГрафикаОтпусков.КонецПериода >= &ДатаОкончанияПроекта";
	Запрос.УстановитьПараметр("ДатаНачалаПроекта", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияПроекта", Объект.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблГрафикОтпусков = РезультатЗапроса.Выгрузить();

	//Проверяем пересечения сотрудника в табл части с графиком отпусков
	Для Каждого Сотрудник Из Объект.КомандаПроекта Цикл
		Для Каждого Запись Из ТаблГрафикОтпусков Цикл
			Если Не Сотрудник.Сотрудник = Запись.Сотрудник Тогда
				Продолжить;
			КонецЕсли;
			НачалоОтпуска = Запись.ДатаНачалаОтпуска;
			КонецОтпуска = Запись.ДатаНачалаОтпуска + Запись.КоличествоДней * 86400;

			Для Каждого ИнтервалЗанятости Из Объект.ИнтервалыЗанятостиСотрудников Цикл
				Если ИнтервалЗанятости.ИД = Сотрудник.ИД Тогда
					Если (ИнтервалЗанятости.НачалоИнтервала <= КонецОтпуска И ИнтервалЗанятости.КонецИнтервала
						>= НачалоОтпуска) Тогда
						ИнтервалЗанятости.ПризнакПересеченияСОтпуском = Истина;
					Иначе
						ИнтервалЗанятости.ПризнакПересеченияСОтпуском = Ложь;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтсортироватьТаблицуИнтервалов()
	//Сортируем таблицу интервалов в соответствии с ИД	
	Если Объект.КомандаПроекта.Количество() <= 0 Тогда
		Возврат;
	КонецЕсли;
	Элементы.ИнтервалыЗанятостиСотрудников.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД",
		Элементы.КомандаПроекта.ТекущиеДанные.ИД);
КонецПроцедуры

&НаКлиенте
Функция ПервичнаяВалидацияДаты(Дата, ПредыдущаяДата)
	//Если не заданы даты проекта
	Если Объект.ДатаНачала = Дата('00010101') Или Объект.ДатаОкончания = Дата('00010101') Тогда
		ПоказатьПредупреждение( , "Необходимо сперва задать даты проекта!");
		Дата = Дата('00010101');
		Возврат Ложь;
	КонецЕсли;
	
	//Если пустое значение назад - назад
	Если Дата = Дата('00010101') Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если пытаемся править задним числом - назад
	Если Не ПредыдущаяДата = Дата('00010101') И ПредыдущаяДата < НачалоДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение( , "Нельзя править дату задним числом!");
		Дата = ПредыдущаяДата;
		Возврат Ложь;
	КонецЕсли;
	
	//Если текущее значение меньше текущего дня - назад
	Если Дата < НачалоДня(ТекущаяДата()) Тогда
		Дата = ПредыдущаяДата;
		ПоказатьПредупреждение( , "Дата не должна быть меньше текущей даты!");
		Возврат Ложь;
	КонецЕсли;
	
	//Если значение не в пределах дат проекта - назад
	Если Дата < Объект.ДатаНачала Или Дата > Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение( , "Дата должна быть в границах дат проекта!");
		Дата = ПредыдущаяДата;
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура РезультатОтветаНаВопросОбУдаленииСотрудника(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивИдентификаторовВыделенныхСтрокДляУдаления = Параметры.МассивИдентификаторовВыделенныхСтрокДляУдаления;
		Для Каждого Идентификатор Из МассивИдентификаторовВыделенныхСтрокДляУдаления Цикл
			НайденнаяУдаляемаяСтрока = Объект.КомандаПроекта.НайтиПоИдентификатору(Идентификатор);
			Объект.КомандаПроекта.Удалить(НайденнаяУдаляемаяСтрока);
			ОчиститьИнтервалы(НайденнаяУдаляемаяСтрока.ИД);
		КонецЦикла;
	КонецЕсли;
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПересеченияИнтерваловСотрудника(ТекущиеДанные)
	//Проверяем на пересечения с другими интервалами
	Для Каждого Строка Из Объект.ИнтервалыЗанятостиСотрудников Цикл
		Если Строка.НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		Если Не ТекущиеДанные.ИД = Строка.ИД Тогда
			Продолжить;
		КонецЕсли;
		ТекущееНачалоИнтервала = ТекущиеДанные.НачалоИнтервала;
		ТекущийКонецИнтервала = ТекущиеДанные.КонецИнтервала;
		Если ПересекаютсяЛиИнтервалы(ТекущееНачалоИнтервала, ТекущийКонецИнтервала, Строка.НачалоИнтервала,
			Строка.КонецИнтервала) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПересекаютсяЛиИнтервалы(НовоеНачало, НовыйКонец, ТекущееНачало, ТекущийКонец)
	//Если интервал находится внутри другого
	Если ТекущееНачало <= НовоеНачало И НовоеНачало <= ТекущийКонец И ТекущееНачало <= НовыйКонец И НовыйКонец
		<= ТекущийКонец Тогда
		Возврат Истина;
	//Если задевает левым краем
	ИначеЕсли ТекущееНачало <= НовоеНачало И НовоеНачало <= ТекущийКонец И НовыйКонец >= ТекущийКонец Тогда
		Возврат Истина;
	//Если задевает правым краем
	ИначеЕсли ТекущееНачало >= НовоеНачало И ТекущееНачало <= НовыйКонец И НовыйКонец <= ТекущийКонец Тогда
		Возврат Истина;
	//Если интервал перекрывает другой  
	ИначеЕсли НовоеНачало <= ТекущееНачало И ТекущийКонец <= НовыйКонец Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОчиститьИнтервалы(ИД)
	//Доавбляем в массив строки на удаление
	МассивИнтервалов = Новый Массив;
	Для Каждого Интервал Из Объект.ИнтервалыЗанятостиСотрудников Цикл
		Если ИД = Интервал.ИД Тогда
			МассивИнтервалов.Добавить(Интервал);
		КонецЕсли;
	КонецЦикла;
	//Удаляем все
	Для Каждого Элемент Из МассивИнтервалов Цикл
		Объект.ИнтервалыЗанятостиСотрудников.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке() Экспорт
	ПоказатьПредупреждение( , "Ошибка!");
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочкиИИнтервалы()
	Если Объект.ДатаНачала = Дата('00010101') Или Объект.ДатаОкончания = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	Диаграмма = ЗанятостьНаПроектеДиаграмма;
	Диаграмма.УстановитьПолныйИнтервал(Объект.ДатаНачала, Объект.ДатаОкончания + 24 * 60 * 60);
	Диаграмма.Точки.Очистить();
	Для Каждого Запись Из Объект.КомандаПроекта Цикл
		Точка = Диаграмма.УстановитьТочку(Запись.ИД);
		Если Не Запись.Сотрудник.Пустая() Тогда
			Точка.Текст = Запись.Сотрудник.Наименование;
		ИначеЕсли Не Запись.Должность.Пустая() Тогда
			Точка.Текст = Запись.Должность.Наименование;
		Иначе
			Точка.Текст = "Сотрудник";
		КонецЕсли;
		Для Каждого ИнтервалЗанятости Из Объект.ИнтервалыЗанятостиСотрудников Цикл
			Серия = Диаграмма.Серии.Получить(0);
			Если Запись.ИД = ИнтервалЗанятости.ИД Тогда
				Если ИнтервалЗанятости.НачалоИнтервала = Дата('00010101') Или ИнтервалЗанятости.КонецИнтервала = Дата(
					'00010101') Тогда
					Продолжить;
				КонецЕсли;
				ИнтервалДиаграммы = Диаграмма.ПолучитьЗначение(Точка, Серия).Добавить();
				ИнтервалДиаграммы.Начало = ИнтервалЗанятости.НачалоИнтервала;
				ИнтервалДиаграммы.Конец = КонецДня(ИнтервалЗанятости.КонецИнтервала);

				Если ИнтервалЗанятости.ПризнакПересеченияСОтпуском Тогда
					ИнтервалДиаграммы.Текст = "Пересечение с отпуском!";
					ИнтервалДиаграммы.Цвет = WebЦвета.Красный;
				Иначе
					ИнтервалДиаграммы.Текст = "Занятость - " + Строка(ИнтервалЗанятости.ПроцентЗанятости) + "%";
					ИнтервалДиаграммы.Цвет = ВернутьЦветВСоответствииСЗанятостью(ИнтервалЗанятости.ПроцентЗанятости);
	//				ИнтервалДиаграммы.Значение.Редактирование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Диаграмма.Обновление = Истина;
//	МассивТочек = Диаграмма.Точки;
//	ТочкаНоль = МассивТочек.Получить(0);
КонецПроцедуры

&НаСервере
Функция ВернутьЦветВСоответствииСЗанятостью(Процент)
	Процент25 = Новый Цвет(218, 253, 186);
	Процент50 = Новый Цвет(154, 235, 163);
	Процент75 = Новый Цвет(69, 196, 176);
	Процент100 = Новый Цвет(19, 103, 138);
	Прошлое = WebЦвета.СветлоСерый;
	Если Процент > 0 И Процент <= 25 Тогда
		Возврат Процент25;
	ИначеЕсли Процент > 25 И Процент <= 50 Тогда
		Возврат Процент50;
	ИначеЕсли Процент > 50 И Процент <= 75 Тогда
		Возврат Процент75;
	ИначеЕсли Процент > 75 И Процент <= 100 Тогда
		Возврат Процент100;
	Иначе
		Возврат Прошлое;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИнициализироватьДиаграммуГанта()
	ЗанятостьНаПроектеДиаграмма.Очистить();
	ЗанятостьНаПроектеДиаграмма.Обновление = Ложь;
	ЗанятостьНаПроектеДиаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	ЗанятостьНаПроектеДиаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Нет;
	ЗанятостьНаПроектеДиаграмма.ПрозрачныйФон = Истина;

	Диаграмма = ЗанятостьНаПроектеДиаграмма;
	Серия = Диаграмма.УстановитьСерию("Занятость");
	Серия.Текст = "Занятость";
	Серия.Цвет = Новый Цвет(19, 103, 138);
	
	//Метки
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементМеток.ЦветФона = WebЦвета.БледноЗолотистый;
	ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;
	ЭлементМеток.ЛинииДелений = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	ЗаполнитьМеткиСтадийПроектаВДиаграмме();

	//Выделить цветом выходные дни
	День = НачалоДня(Объект.ДатаНачала);
	Пока День <= НачалоДня(Объект.ДатаОкончания) Цикл
		Если ДеньНедели(День) = 6 Или ДеньНедели(День) = 7 Тогда
			ВыделениеЦветом = Диаграмма.ИнтервалыФона.Добавить(День, День + (24 * 60 * 60));
			ВыделениеЦветом.Цвет = Новый Цвет(230, 230, 230);
		КонецЕсли;
		День = День + (24 * 60 * 60);
	КонецЦикла;

	//Заполнить метку "сегодня"
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;
	ЭлементМеток.ЛинииДелений = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Метка = ЭлементМеток.Метки.Добавить(НачалоДня(ТекущаяДата()));
	Метка.Текст = "СЕГОДНЯ";
	Метка.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
	Метка.ЦветЛинии = WebЦвета.СинийСоСтальнымОттенком;
	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДата()), НачалоДня(ТекущаяДата()) + 24 * 60
		* 60);
	ВыделениеПроекта.Цвет = WebЦвета.СинийСоСтальнымОттенком;

	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМеткиСтадийПроектаВДиаграмме()
	ЭлементМеток = ЗанятостьНаПроектеДиаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Получить(2);
	ЭлементМеток.Метки.Очистить();
	//Заполнить метки стадий проекта
//	ЗанятостьНаПроектеДиаграмма.ОбластьПостроения.ШкалаВремени.Элементы.
	СписокСтадий = Новый СписокЗначений;
	Для Каждого Стадия Из Объект.СтадииПроекта Цикл
		СписокСтадий.Добавить(Стадия.НачалоСтадии, Строка(Стадия.Стадия), , );
	КонецЦикла;
	СписокСтадий.СортироватьПоЗначению();

	Для Каждого Стадия Из СписокСтадий Цикл
		Метка = ЭлементМеток.Метки.Добавить(Стадия.Значение);
		Метка.Текст = Стадия.Представление;
		Метка.ЦветТекста = WebЦвета.Малиновый;
		Метка.ЦветЛинии = WebЦвета.Малиновый;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Должность, Владелец)
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	Элемент = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	Элемент.Использование = Истина;
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.ПравоеЗначение = Должность;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКД);

	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Владелец);
КонецПроцедуры

&НаСервере
Функция ВернутьДолжностьРуководительПроекта()
	Возврат Справочники.Должности.РуководительПроекта;
КонецФункции
#КонецОбласти

//&НаКлиенте
//Процедура ЗанятостьНаПроектеДиаграммаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
////	СтандартнаяОбработка = Ложь;
//	ПараметрыФормы = Новый Структура;
//	СтандартныйПериод = Новый СтандартныйПериод;
//	
//	//Создаем новый интервал
//	Если Значения.Количество() = 0 Тогда
//		СтандартныйПериод.ДатаНачала = Объект.ДатаНачала;
//		СтандартныйПериод.ДатаОкончания = Объект.ДатаОкончания;
//		ПараметрыФормы.Вставить("ИнтервалПарам", СтандартныйПериод);
//		ОписаниеОповещения = Новый ОписаниеОповещения(
//			"ВозвратЗначенийИзФормыВыбораВДиаграмму", 
//			ЭтотОбъект, ,
//			"СообщитьОбОшибке",
//			ЭтотОбъект);
//		ОткрытьФорму("Документ.Проекты.Форма.ФормаВыбораИнтервала", ПараметрыФормы, Элемент, , , , ОписаниеОповещения, );
//		Возврат;
//	КонецЕсли;
//
//	
//
////	СтандартныйПериод.ДатаНачала = Значения[1].Начало;
////	СтандартныйПериод.ДатаОкончания = Значения[1].Конец;
////	ПараметрыФормы.Вставить("ИнтервалПарам", СтандартныйПериод);
////	ОткрытьФорму("Документ.Проекты.Форма.ФормаВыбораИнтервала", ПараметрыФормы, Элемент);
//КонецПроцедуры
