#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьИнтервалыВТаблЧасти();
//	АктуализируемПериодГрафикаОтпусков();
//	ПроверкаПересеченияСотрудниковСГрафикомОтпусков();
	ИнициализироватьДиаграммуГанта();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РуководительПроектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, ВернутьДолжностьРуководительПроекта(),
		Элементы.РуководительПроекта);
КонецПроцедуры

&НаКлиенте
Процедура ЗанятостьНаПроектеДиаграммаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.ДатаНачала = Значения[1].Начало;
	СтандартныйПериод.ДатаОкончания = Значения[1].Конец;
	ПараметрыФормы.Вставить("ИнтервалПарам", СтандартныйПериод);
	ОткрытьФорму("Документ.Проекты.Форма.ФормаВыбораИнтервала", ПараметрыФормы, Элемент);
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандаПроекта
&НаКлиенте
Процедура КомандаПроектаСотрудникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Элементы.КомандаПроекта.ТекущиеДанные.Должность,
		Элементы.КомандаПроектаСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаСотрудникПриИзменении(Элемент)
//	ТекущиеДанные = Элементы.КомандаПроекта.ТекущиеДанные;
//	ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(ТекущиеДанные.Сотрудник,
//										ТекущиеДанные.ПересекаетсяЛиСГрафикомОтпусков);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаДолжностьПриИзменении(Элемент)
//	Очищаем сотрудника и метку пересечения, т.к. надо будет заново выбирать сотрудника 
//	в соответствии с введенной должностью 
	Элементы.КомандаПроекта.ТекущиеДанные.Сотрудник = Неопределено;
КонецПроцедуры

//Заполняем табличную часть интервалами
&НаКлиенте
Процедура КомандаПроектаИнтервалыЗанятостиСписокПриИзменении(Элемент)
	ТекДанные = Элементы.КомандаПроекта.ТекущиеДанные;

	//Определяем старые записи и добавляем в массив
	МассивНаУдаление = Новый Массив;
	Для Каждого Запись Из Объект.ИнтервалыЗанятостиСотрудников Цикл
		Если ТекДанные.ИД = Запись.ИД Тогда
			МассивНаУдаление.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	//Проходимся по массиву и удаляем старые записи
	Для Каждого Запись Из МассивНаУдаление Цикл
		Объект.ИнтервалыЗанятостиСотрудников.Удалить(Запись);
	КонецЦикла;
	
	//Добавляем записи в новым идентификатором
	ТекДанные.ИД = Новый УникальныйИдентификатор;
	Для Каждого Интервал Из ТекДанные.ИнтервалыЗанятостиСписок Цикл
		НоваяЗапись = Объект.ИнтервалыЗанятостиСотрудников.Добавить();
		НоваяЗапись.НачалоИнтервала = Интервал.Значение.ДатаНачала;
		НоваяЗапись.КонецИнтервала = Интервал.Значение.ДатаОкончания;
		НоваяЗапись.ИД = ТекДанные.ИД;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриИзменении(Элемент)
	ЗаполнитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Проверяем если добавляется новая запись
	Если НоваяСтрока и Не Копирование Тогда
		Элементы.КомандаПроекта.ТекущиеДанные.ИД = Новый УникальныйИдентификатор();
    КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьТочкиИИнтервалы()
	Диаграмма = ЗанятостьНаПроектеДиаграмма;
	Диаграмма.Точки.Очистить();
	Для Каждого Запись Из Объект.КомандаПроекта Цикл
		Точка = Диаграмма.УстановитьТочку(Запись.ИД);
		Если НЕ Запись.Сотрудник.Пустая() Тогда
			Точка.Текст = Запись.Сотрудник.Наименование; 
		ИначеЕсли НЕ Запись.Должность.Пустая() Тогда
			Точка.Текст = Запись.Должность.Наименование; 
		Иначе
			Точка.Текст = "Сотрудник";
		КонецЕсли;

	//		Для Каждого ИнтервалЗанятости Из Объект.ИнтервалыЗанятостиСотрудников Цикл
	//			Если Запись.ИД = ИнтервалЗанятости.ИД Тогда	
	//				ИнтервалДиаграммы = Диаграмма.ПолучитьЗначение(Точка, Серия).Добавить();
	//				ИнтервалДиаграммы.Начало = ИнтервалЗанятости.НачалоИнтервала;
	//				ИнтервалДиаграммы.Конец = ИнтервалЗанятости.КонецИнтервала;
	////				ИнтервалДиаграммы.Значение.Редактирование = Истина;
	//			КонецЕсли;
	//		КонецЦикла;		
	КонецЦикла;

//	МассивТочек = Диаграмма.Точки;
//	ТочкаНоль = МассивТочек.Получить(0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтервалыВТаблЧасти()
//	Для Каждого Запись Из Объект.КомандаПроекта Цикл
//		Для Каждого Интервал Из Объект.ИнтервалыЗанятостиСотрудников Цикл
//			Если Запись.ИД = Интервал.ИД Тогда	
//				СтандарныйПериод = Новый СтандартныйПериод();	
//				СтандарныйПериод.ДатаНачала = Интервал.НачалоИнтервала;
//				СтандарныйПериод.ДатаОкончания = Интервал.КонецИнтервала;
//				Запись.ИнтервалыЗанятостиСписок.Добавить(СтандарныйПериод);
//			КонецЕсли;
//		КонецЦикла;		
//	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДиаграммуГанта()

	ЗанятостьНаПроектеДиаграмма.Очистить();
	ЗанятостьНаПроектеДиаграмма.Обновление = Ложь;
	ЗанятостьНаПроектеДиаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	ЗанятостьНаПроектеДиаграмма.УстановитьПолныйИнтервал(НачалоМесяца(Объект.ДатаНачала), КонецМесяца(
		Объект.ДатаОкончания));

	Диаграмма = ЗанятостьНаПроектеДиаграмма;

	Процент25 = Новый Цвет(218, 253, 186);
	Процент50 = Новый Цвет(154, 235, 163);
	Процент75 = Новый Цвет(69, 196, 176);
	Процент100 = Новый Цвет(19, 103, 138);
	Прошлое = WebЦвета.СветлоСерый;

	ТекущаяДата = Дата(2025, 08, 23);

	Серия = Диаграмма.УстановитьСерию("Занятость");
	Серия.Текст = "Занятость";
	Серия.Цвет = Процент100;

	ЗаполнитьТочкиИИнтервалы();
	
	//Метки
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;
	ЭлементМеток.ЛинииДелений = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	Метка = ЭлементМеток.Метки.Добавить(Объект.ДатаНачала);
	Метка.Текст = "Начало проекта";
	Метка.ЦветТекста = WebЦвета.Зеленый;
	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(Объект.ДатаНачала, Объект.ДатаНачала + 5 * 60 * 60);
	ВыделениеПроекта.Цвет = WebЦвета.Зеленый;

	Метка = ЭлементМеток.Метки.Добавить(ТекущаяДата);
	Метка.Текст = "СЕГОДНЯ";
	Метка.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
	Метка.ЦветЛинии = WebЦвета.СинийСоСтальнымОттенком;
//	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(ТекущаяДата, ТекущаяДата+24*60*60);
//	ВыделениеПроекта.Цвет = WebЦвета.СинийСоСтальнымОттенком;

	Метка = ЭлементМеток.Метки.Добавить(Объект.ДатаОкончания);
	Метка.Текст = "Окончание проекта";
	Метка.ЦветТекста = WebЦвета.ОранжевоКрасный;
	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(Объект.ДатаОкончания, Объект.ДатаОкончания + 5 * 60 * 60);
	ВыделениеПроекта.Цвет = WebЦвета.ОранжевоКрасный;

	// Обновить диаграмму.
	Диаграмма.Обновление = Истина;

КонецПроцедуры

&НаСервере
Процедура ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(Сотрудник, МеткаПересечения)
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
	|ГДЕ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если Не Сотрудник = Выборка.Сотрудник Тогда
		МеткаПересечения = Ложь;
		Возврат;
	КонецЕсли;

	НачалоОтпуска = Выборка.ДатаНачалаОтпуска;
	КонецОтпуска = Выборка.ДатаНачалаОтпуска + Выборка.КоличествоДней * 86400;
	Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
		МеткаПересечения = Истина;
	Иначе
		МеткаПересечения = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Должность, Владелец)
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	Элемент = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	Элемент.Использование = Истина;
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.ПравоеЗначение = Должность;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКД);

	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Владелец);
КонецПроцедуры

&НаСервере
Процедура АктуализируемПериодГрафикаОтпусков()
	//Запрос к документу График Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикОтпусков.НачалоПериода КАК НачалоПериода,
	|	ГрафикОтпусков.КонецПериода КАК КонецПериода
	|ИЗ
	|	Документ.ГрафикОтпусков КАК ГрафикОтпусков
	|УПОРЯДОЧИТЬ ПО
	|ГрафикОтпусков.Номер ВОЗР";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ГрафикОтпусковНачалоПериода = ВыборкаДетальныеЗаписи.НачалоПериода;
	ГрафикОтпусковКонецПериода = ВыборкаДетальныеЗаписи.КонецПериода;
КонецПроцедуры

&НаСервере
Процедура ПроверкаПересеченияСотрудниковСГрафикомОтпусков()
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
	|ГДЕ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода";
	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблГрафикОтпусков = РезультатЗапроса.Выгрузить();

	//Проверяем пересечения сотрудника в табл части с графиком отпусков
	Для Каждого СтрокаТЧ Из Объект.КомандаПроекта Цикл
		Для Каждого Запись Из ТаблГрафикОтпусков Цикл
			Если Не СтрокаТЧ.Сотрудник = Запись.Сотрудник Тогда
				Продолжить;
			КонецЕсли;
			НачалоОтпуска = Запись.ДатаНачалаОтпуска;
			КонецОтпуска = Запись.ДатаНачалаОтпуска + Запись.КоличествоДней * 86400;
			Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Истина;
			Иначе
				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВернутьДолжностьРуководительПроекта()
	Возврат Справочники.Должности.РуководительПроекта;
КонецФункции
#КонецОбласти