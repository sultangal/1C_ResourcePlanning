#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АктуализируемПериодГрафикаОтпусков();
	ПроверкаПересеченияСотрудниковСГрафикомОтпусков();
	ЗаполнитьДиаграммуГанта();
	


КонецПроцедуры
#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РуководительПроектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, ВернутьДолжностьРуководительПроекта(),
		Элементы.РуководительПроекта);
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандаПроекта
&НаКлиенте
Процедура КомандаПроектаСотрудникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Элементы.КомандаПроекта.ТекущиеДанные.Должность,
		Элементы.КомандаПроектаСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаСотрудникПриИзменении(Элемент)
	ТекущиеДанные = Элементы.КомандаПроекта.ТекущиеДанные;
	ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(ТекущиеДанные.Сотрудник,
										ТекущиеДанные.ПересекаетсяЛиСГрафикомОтпусков);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаДолжностьПриИзменении(Элемент)
	//Очищаем сотрудника и метку пересечения, т.к. надо будет заново выбирать сотрудника 
	//в соответствии с введенной должностью 
	Элементы.КомандаПроекта.ТекущиеДанные.Сотрудник = Неопределено;
	Элементы.КомандаПроекта.ТекущиеДанные.ПересекаетсяЛиСГрафикомОтпусков = Неопределено;
КонецПроцедуры
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СформироватьДиаграммуГанта(Диаграмма)

	Диаграмма.Очистить();
	
	// Запретить обновление диаграммы.
	Диаграмма.Обновление =Ложь;
	
	// Установить заголовок диаграммы.
	Диаграмма.ОбластьЗаголовка.Текст ="График дежурств";
	
	// Интервал будем определять самостоятельно.
	Диаграмма.АвтоОпределениеПолногоИнтервала =Ложь;
	
	// Установить интервал.
	Диаграмма.УстановитьПолныйИнтервал(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	
	// В диаграмме будет две точки - сотрудники Петров и Сидоров …
	ТочкаП = Диаграмма.УстановитьТочку("Петров");
	ТочкаС = Диаграмма.УстановитьТочку("Сидоров");
	
	// и две серии - дежурство на вахте и дежурство в центральном офисе.
	СерияНаВахте = Диаграмма.УстановитьСерию("На вахте");
	СерияВЦентре = Диаграмма.УстановитьСерию("В центральном офисе");
	
	// Задать цвета серий, отличные от цвета по умолчанию.
	СерияНаВахте.Цвет = WebЦвета.Синий;
	СерияВЦентре.Цвет = WebЦвета.Желтый;
	ПервыйДень = НачалоМесяца(ТекущаяДата());
	
	// Получить значение диаграммы - дежурство Петрова на вахте.
	Значение = Диаграмма.ПолучитьЗначение(ТочкаП, СерияНаВахте);
	
	// В значении определить новый интервал.
	Интервал = Значение.Добавить();
	Интервал.Текст ="Работает на вахте";
	
	// Определить границы интервала.
	Интервал.Начало = ПервыйДень;
	Интервал.Конец = ПервыйДень +10*24*60*60;
	
	// Получить значение диаграммы - дежурство Петрова в центральном офисе.
	Значение = Диаграмма.ПолучитьЗначение(ТочкаП, СерияВЦентре);
	Интервал = Значение.Добавить();
	Интервал.Текст = "Работает в центральном офисе";
	Интервал.Начало = ПервыйДень +14*24*60*60;
	Интервал.Конец = ПервыйДень +24*24*60*60;
	
	// Получить значение диаграммы - дежурство Сидорова на вахте.
	Значение = Диаграмма.ПолучитьЗначение(ТочкаС, СерияНаВахте);
	Интервал = Значение.Добавить();
	Интервал.Текст ="Работает на вахте";
	Интервал.Начало = ПервыйДень +5*24*60*60;
	Интервал.Конец = ПервыйДень +15*24*60*60;
	
	// Получить значение диаграммы - дежурство Сидорова в центральном офисе.
	Значение = Диаграмма.ПолучитьЗначение(ТочкаС, СерияВЦентре);
	Интервал = Значение.Добавить();
	Интервал.Текст = "Работает в центральном офисе";
	Интервал.Начало = ПервыйДень +21*24*60*60;
	Интервал.Конец = ПервыйДень +25*24*60*60;
	
	// Обновить диаграмму.
	Диаграмма.Обновление = Истина;

КонецПроцедуры






&НаСервере
Процедура ЗаполнитьДиаграммуГанта()
	ИсторияИзмененийДиаграмма.Очистить();
	ИсторияИзмененийДиаграмма.Обновление = Ложь;
	ИсторияИзмененийДиаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	ИсторияИзмененийДиаграмма.УстановитьПолныйИнтервал(НачалоМесяца(Объект.ДатаНачала), 
													КонецМесяца(Объект.ДатаОкончания));

	ИсторияИзмененийДиаграмма.УстановитьТочку("Стадия роекта");
	
	Диаграмма = ИсторияИзмененийДиаграмма;
	
//	Диаграмма.Точ
	
		// В диаграмме будет две точки - сотрудники Петров и Сидоров …
	ТочкаП = Диаграмма.УстановитьТочку("Петров");
	ТочкаП.Текст = "Петров";
	ТочкаС = Диаграмма.УстановитьТочку("Сидоров");
	ТочкаС.Текст = "Сидоров";
	
	// и две серии - дежурство на вахте и дежурство в центральном офисе.
	СерияНаВахте = Диаграмма.УстановитьСерию("На вахте");
	СерияВЦентре = Диаграмма.УстановитьСерию("В центральном офисе");
	
	// Задать цвета серий, отличные от цвета по умолчанию.
	СерияНаВахте.Цвет = WebЦвета.Синий;
	СерияВЦентре.Цвет = WebЦвета.Желтый;
	ПервыйДень = НачалоМесяца(ТекущаяДата());
	
	// Получить значение диаграммы - дежурство Петрова на вахте.
	Значение = Диаграмма.ПолучитьЗначение(ТочкаП, СерияНаВахте);
	
	// В значении определить новый интервал.
	Интервал = Значение.Добавить();
	Интервал.Текст ="100% занятость";

	
		// Определить границы интервала.
	Интервал.Начало = ПервыйДень +14*24*60*60;
	Интервал.Конец = ПервыйДень +24*24*60*60;
	
	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(Объект.ДатаНачала, Объект.ДатаОкончания);
	ВыделениеПроекта.Цвет = WebЦвета.СветлоКоралловый;
	
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	Метка = ЭлементМеток.Метки.Добавить(Объект.ДатаНачала);
	Метка.Текст = "Начало Проекта";
	Метка.ЦветТекста = WebЦвета.Красный;
	Метка.ЦветЛинии =  WebЦвета.Красный;
//	
//	// Получить значение диаграммы - дежурство Петрова в центральном офисе.
//	Значение = Диаграмма.ПолучитьЗначение(ТочкаП, СерияВЦентре);
//	Интервал = Значение.Добавить();
//	Интервал.Текст = "Работает в центральном офисе";
//	Интервал.Начало = ПервыйДень +14*24*60*60;
//	Интервал.Конец = ПервыйДень +24*24*60*60;
//	
//	// Получить значение диаграммы - дежурство Сидорова на вахте.
//	Значение = Диаграмма.ПолучитьЗначение(ТочкаС, СерияНаВахте);
//	Интервал = Значение.Добавить();
//	Интервал.Текст ="Работает на вахте";
//	Интервал.Начало = ПервыйДень +5*24*60*60;
//	Интервал.Конец = ПервыйДень +15*24*60*60;
//	
//	// Получить значение диаграммы - дежурство Сидорова в центральном офисе.
//	Значение = Диаграмма.ПолучитьЗначение(ТочкаС, СерияВЦентре);
//	Интервал = Значение.Добавить();
//	Интервал.Текст = "Работает в центральном офисе";
//	Интервал.Начало = ПервыйДень +21*24*60*60;
//	Интервал.Конец = ПервыйДень +25*24*60*60;
	
	// Обновить диаграмму.
	Диаграмма.Обновление = Истина;
	
	
//	АМИВав = ИсторияИзменений.УстановитьТочку();

//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
// Данный фрагмент построен конструктором.
// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!

//Запрос = Новый Запрос;
//Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ИсторияПроектов.Период КАК ИППериод,
//	|	ИсторияПроектов.Проект КАК ИППроект,
//	|	ИсторияПроектов.ИдентификаторЗаписи КАК ИПИдентификаторЗаписи,
//	|	ИсторияПроектов.СтатусПроекта КАК ИПСтатусПроекта,
//	|	ИсторияПроектов.РуководительПроекта КАК ИПРуководительПроекта,
//	|	ИсторияПроектов.НазваниеПроекта КАК ИПНазваниеПроекта,
//	|	ИсторияСотрудниковНаПроекте.Период КАК ИСНППериод,
//	|	ИсторияСотрудниковНаПроекте.Проект КАК ИСНППроект,
//	|	ИсторияСотрудниковНаПроекте.ИДЗаписиВИсторииПроектов КАК ИСНПИДЗаписиВИсторииПроектов,
//	|	ИсторияСотрудниковНаПроекте.Сотрудник КАК ИСНПСотрудник,
//	|	ИсторияСотрудниковНаПроекте.Должность КАК ИСНПДолжность,
//	|	ИсторияСотрудниковНаПроекте.НеобходимыйПроцентЗанятостиНаПроекте КАК ИСНПНеобходимыйПроцентЗанятостиНаПроекте
//	|ИЗ
//	|	РегистрСведений.ИсторияПроектов КАК ИсторияПроектов
//	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСотрудниковНаПроекте КАК ИсторияСотрудниковНаПроекте ПО 
//	|ИсторияПроектов.Проект = ИсторияСотрудниковНаПроекте.Проект 
//	|
//	|ГДЕ
//	|	ИсторияПроектов.Проект = &Проект";
//
//Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
//
//РезультатЗапроса = Запрос.Выполнить();
//
//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//
//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
//КонецЦикла;
//
////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры



&НаСервере
Процедура ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(Сотрудник, МеткаПересечения)
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
	|ГДЕ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если НЕ Сотрудник = Выборка.Сотрудник Тогда
		МеткаПересечения = Ложь;
		Возврат;
	КонецЕсли;
	
	НачалоОтпуска = Выборка.ДатаНачалаОтпуска;
	КонецОтпуска = Выборка.ДатаНачалаОтпуска + Выборка.КоличествоДней * 86400;
	Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
		МеткаПересечения = Истина;
	Иначе
		МеткаПересечения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Должность, Владелец)
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	Элемент = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	Элемент.Использование = Истина;
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.ПравоеЗначение = Должность;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКД);

	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Владелец);
КонецПроцедуры

&НаСервере
Процедура АктуализируемПериодГрафикаОтпусков()
	//Запрос к документу График Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикОтпусков.НачалоПериода КАК НачалоПериода,
	|	ГрафикОтпусков.КонецПериода КАК КонецПериода
	|ИЗ
	|	Документ.ГрафикОтпусков КАК ГрафикОтпусков
	|УПОРЯДОЧИТЬ ПО
	|ГрафикОтпусков.Номер ВОЗР";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ГрафикОтпусковНачалоПериода = ВыборкаДетальныеЗаписи.НачалоПериода;
	ГрафикОтпусковКонецПериода = ВыборкаДетальныеЗаписи.КонецПериода;
КонецПроцедуры

&НаСервере
Процедура ПроверкаПересеченияСотрудниковСГрафикомОтпусков()
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
	|ГДЕ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода";
	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблГрафикОтпусков = РезультатЗапроса.Выгрузить();

	//Проверяем пересечения сотрудника в табл части с графиком отпусков
	Для Каждого СтрокаТЧ Из Объект.КомандаПроекта Цикл
		Для Каждого Запись Из ТаблГрафикОтпусков Цикл
			Если Не СтрокаТЧ.Сотрудник = Запись.Сотрудник Тогда
				Продолжить;
			КонецЕсли;
			НачалоОтпуска = Запись.ДатаНачалаОтпуска;
			КонецОтпуска = Запись.ДатаНачалаОтпуска + Запись.КоличествоДней * 86400;
			Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Истина;
			Иначе
				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВернутьДолжностьРуководительПроекта()
	Возврат Справочники.Должности.РуководительПроекта;
КонецФункции
#КонецОбласти