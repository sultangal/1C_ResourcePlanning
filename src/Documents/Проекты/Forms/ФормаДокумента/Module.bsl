//TODO: При новом выборе должности надо очищать все остальные поля в строке, т.к. сотрудник в этой строке может быть другой должности.
// При выборе сотрудника надо фильтровать доступных сотрудников по должности.
#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АктуализируемПериодГрафикаОтпусков();
	ПроверкаПересеченияСотрудниковСГрафикомОтпусков();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РуководительПроектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, ВернутьДолжностьРуководительПроекта(),
		Элементы.РуководительПроекта);
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандаПроекта
&НаКлиенте
Процедура КомандаПроектаСотрудникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Элементы.КомандаПроекта.ТекущиеДанные.Должность,
		Элементы.КомандаПроектаСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаСотрудникПриИзменении(Элемент)
	ТекущиеДанные = Элементы.КомандаПроекта.ТекущиеДанные;
	ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(ТекущиеДанные.Сотрудник,
										ТекущиеДанные.ПересекаетсяЛиСГрафикомОтпусков);
КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(Сотрудник, МеткаПересечения)
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
	|ГДЕ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если НЕ Сотрудник = Выборка.Сотрудник Тогда
		МеткаПересечения = Ложь;
		Возврат;
	КонецЕсли;
	
	НачалоОтпуска = Выборка.ДатаНачалаОтпуска;
	КонецОтпуска = Выборка.ДатаНачалаОтпуска + Выборка.КоличествоДней * 86400;
	Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
		МеткаПересечения = Истина;
	Иначе
		МеткаПересечения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Должность, Владелец)
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	Элемент = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	Элемент.Использование = Истина;
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.ПравоеЗначение = Должность;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКД);

	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Владелец);
КонецПроцедуры

&НаСервере
Процедура АктуализируемПериодГрафикаОтпусков()
	//Запрос к документу График Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикОтпусков.НачалоПериода КАК НачалоПериода,
	|	ГрафикОтпусков.КонецПериода КАК КонецПериода
	|ИЗ
	|	Документ.ГрафикОтпусков КАК ГрафикОтпусков
	|УПОРЯДОЧИТЬ ПО
	|ГрафикОтпусков.Номер ВОЗР";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ГрафикОтпусковНачалоПериода = ВыборкаДетальныеЗаписи.НачалоПериода;
	ГрафикОтпусковКонецПериода = ВыборкаДетальныеЗаписи.КонецПериода;
КонецПроцедуры

&НаСервере
Процедура ПроверкаПересеченияСотрудниковСГрафикомОтпусков()
	//Запрос к регистру История Графика Отпусков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
	|ГДЕ
	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода";
	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблГрафикОтпусков = РезультатЗапроса.Выгрузить();

	//Проверяем пересечения сотрудника в табл части с графиком отпусков
	Для Каждого СтрокаТЧ Из Объект.КомандаПроекта Цикл
		Для Каждого Запись Из ТаблГрафикОтпусков Цикл

			Если Не СтрокаТЧ.Сотрудник = Запись.Сотрудник Тогда
				Продолжить;
			КонецЕсли;

			НачалоОтпуска = Запись.ДатаНачалаОтпуска;
			КонецОтпуска = Запись.ДатаНачалаОтпуска + Запись.КоличествоДней * 86400;

			Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Истина;
			Иначе
				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Ложь;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВернутьДолжностьРуководительПроекта()
	Возврат Справочники.Должности.РуководительПроекта;
КонецФункции
#КонецОбласти