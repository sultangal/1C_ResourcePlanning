//TODO: Реализовать проверку пересечений с производственным календарем
#Область ОписаниеПеременных
&НаКлиенте
Перем ПредыдущаяДатаНачалаИнтервала;
&НаКлиенте
Перем ПредыдущаяДатаКонцаИнтервала;
#КонецОбласти
#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
//	ЗаполнитьИнтервалыВТаблЧасти();
//	АктуализируемПериодГрафикаОтпусков();
//	ПроверкаПересеченияСотрудниковСГрафикомОтпусков();
	ИнициализироватьДиаграммуГанта();

КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РуководительПроектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, ВернутьДолжностьРуководительПроекта(),
		Элементы.РуководительПроекта);
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандаПроекта
&НаКлиенте
Процедура КомандаПроектаСотрудникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Элементы.КомандаПроекта.ТекущиеДанные.Должность,
		Элементы.КомандаПроектаСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаСотрудникПриИзменении(Элемент)
//TODO: Надо проверить есть ли уже такой сотрудник в списке, 
//если есть не позволять добавить или вообще убрать из вариантов выбора
//	ТекущиеДанные = Элементы.КомандаПроекта.ТекущиеДанные;
//	ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(ТекущиеДанные.Сотрудник,
//										ТекущиеДанные.ПересекаетсяЛиСГрафикомОтпусков);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаДолжностьПриИзменении(Элемент)
//	Очищаем сотрудника и метку пересечения, т.к. надо будет заново выбирать сотрудника 
//	в соответствии с введенной должностью 
	Элементы.КомандаПроекта.ТекущиеДанные.Сотрудник = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриИзменении(Элемент)
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Проверяем если добавляется новая запись
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.КомандаПроекта.ТекущиеДанные.ИД = Новый УникальныйИдентификатор;
	КонецЕсли;
	//---------------------------------------
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПриАктивизацииСтроки(Элемент)
	//Сортируем таблицу интервалов в соответствии с ИД
	Элементы.ИнтервалыЗанятостиСотрудников.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД",
		Элементы.КомандаПроекта.ТекущиеДанные.ИД);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроектаПередУдалением(Элемент, Отказ)
	//Вызываем диалоговое окно
//	Режим = РежимДиалогаВопрос.ДаНет;  
//    Ответ = Вопрос("Сохранить текст?", Режим,0) ;
//    Если Ответ = КодВозвратаДиалога.Да Тогда
//		ОчиститьИнтервалы(Элементы.КомандаПроекта.ТекущиеДанные.ИД);
//    КонецЕсли;
	ОчиститьИнтервалы(Элементы.КомандаПроекта.ТекущиеДанные.ИД);
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыИнтервалыЗанятостиСотрудников
&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Проверяем если добавляется новая запись
	Если НоваяСтрока И Не Копирование Тогда
		//Назначаем ИДшку
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.ИД = Элементы.КомандаПроекта.ТекущиеДанные.ИД;
	КонецЕсли;
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПослеУдаления(Элемент)
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковНачалоИнтервалаПриИзменении(Элемент)
	//Проверяем значение интервала на валидность
	НачалоИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала;
	Если НачалоИнтервала = Дата('00010101') Или Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала
		= Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	Если ПредыдущаяДатаНачалаИнтервала < ТекущаяДата() ИЛИ НачалоИнтервала < ТекущаяДата() Тогда
		ПоказатьПредупреждение( , "Нельзя исправлять интервалы задним числом!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала = ПредыдущаяДатаНачалаИнтервала;
		Возврат;
	КонецЕсли;
	Если НачалоИнтервала < Объект.ДатаНачала Тогда
		ПоказатьПредупреждение( , "Начало интервала не должно быть меньше даты начала проекта!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала = ПредыдущаяДатаНачалаИнтервала;
		Возврат;
	КонецЕсли;
	Если НачалоИнтервала >= Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала Тогда
		ПоказатьПредупреждение( , "Начало интервала не должно быть больше или равно концу интервала!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала = ПредыдущаяДатаНачалаИнтервала;
		Возврат;
	КонецЕсли;
	Если ПроверитьПересеченияИнтерваловСотрудника(Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные) Тогда
		ПоказатьПредупреждение( , "Интервал пересекается с другими интервалами сотрудника!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала = ПредыдущаяДатаНачалаИнтервала;
		Возврат;
	КонецЕсли;
	//-----------------------------------------------------------------------
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковКонецИнтервалаПриИзменении(Элемент)
	//Проверяем значение интервала на валидность
	КонецИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала;
	Если КонецИнтервала = Дата('00010101') Или Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала
		= Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	Если ПредыдущаяДатаНачалаИнтервала < ТекущаяДата() ИЛИ КонецИнтервала < ТекущаяДата() Тогда
		ПоказатьПредупреждение( , "Нельзя исправлять интервалы задним числом!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = ПредыдущаяДатаКонцаИнтервала;
		Возврат;
	КонецЕсли;
	Если КонецИнтервала > Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение( , "Конец интервала не должен быть больше даты окончания проекта!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = ПредыдущаяДатаКонцаИнтервала;
		Возврат;
	КонецЕсли;
	Если КонецИнтервала <= Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала Тогда
		ПоказатьПредупреждение( , "Конец интервала не должен быть меньше или равен началу интервала!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = ПредыдущаяДатаКонцаИнтервала;
		Возврат;
	КонецЕсли;
	Если ПроверитьПересеченияИнтерваловСотрудника(Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные) Тогда
		ПоказатьПредупреждение( , "Интервал пересекается с другими интервалами сотрудника!");
		Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала = ПредыдущаяДатаКонцаИнтервала;
		Возврат;
	КонецЕсли;
	//-----------------------------------------------------------------------
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковПриИзменении(Элемент)
	ОбновитьТочкиИИнтервалы();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковНачалоИнтервалаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаНачалаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковНачалоИнтервалаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
	СтандартнаяОбработка)
	ПредыдущаяДатаНачалаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.НачалоИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковКонецИнтервалаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ПредыдущаяДатаКонцаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыЗанятостиСотрудниковКонецИнтервалаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПредыдущаяДатаКонцаИнтервала = Элементы.ИнтервалыЗанятостиСотрудников.ТекущиеДанные.КонецИнтервала;
КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция ПроверитьПересеченияИнтерваловСотрудника(ТекущиеДанные)
	//Проверяем на пересечения с другими интервалами
	Для Каждого Строка Из Объект.ИнтервалыЗанятостиСотрудников Цикл
		Если Строка.НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		Если Не ТекущиеДанные.ИД = Строка.ИД Тогда
			Продолжить;
		КонецЕсли;
		ТекущееНачалоИнтервала = ТекущиеДанные.НачалоИнтервала;
		ТекущийКонецИнтервала = ТекущиеДанные.КонецИнтервала;
		Если ПересекаютсяЛиИнтервалы(ТекущееНачалоИнтервала, ТекущийКонецИнтервала, Строка.НачалоИнтервала,
			Строка.КонецИнтервала) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПересекаютсяЛиИнтервалы(НовоеНачало, НовыйКонец, ТекущееНачало, ТекущийКонец)
	Если ТекущееНачало <= НовыйКонец И ТекущийКонец >= НовоеНачало Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
&НаКлиенте
Процедура ОчиститьИнтервалы(ИД)
	//Доавбляем в массив строки на удаление
	МассивИнтервалов = Новый Массив;
	Для Каждого Интервал Из Объект.ИнтервалыЗанятостиСотрудников Цикл
		Если ИД = Интервал.ИД Тогда
			МассивИнтервалов.Добавить(Интервал);
		КонецЕсли;
	КонецЦикла;
	//Удаляем все
	Для Каждого Элемент Из МассивИнтервалов Цикл
		Объект.ИнтервалыЗанятостиСотрудников.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке() Экспорт
	ПоказатьПредупреждение( , "Ошибка!");
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочкиИИнтервалы()
	Диаграмма = ЗанятостьНаПроектеДиаграмма;
	Диаграмма.Точки.Очистить();
	Для Каждого Запись Из Объект.КомандаПроекта Цикл
		Точка = Диаграмма.УстановитьТочку(Запись.ИД);
		Если Не Запись.Сотрудник.Пустая() Тогда
			Точка.Текст = Запись.Сотрудник.Наименование;
		ИначеЕсли Не Запись.Должность.Пустая() Тогда
			Точка.Текст = Запись.Должность.Наименование;
		Иначе
			Точка.Текст = "Сотрудник";
		КонецЕсли;

		Для Каждого ИнтервалЗанятости Из Объект.ИнтервалыЗанятостиСотрудников Цикл
			Серия = Диаграмма.Серии.Получить(0);
			Если Запись.ИД = ИнтервалЗанятости.ИД Тогда
				Если ИнтервалЗанятости.НачалоИнтервала = Дата('00010101') Или ИнтервалЗанятости.КонецИнтервала = Дата(
					'00010101') Тогда
					Продолжить;
				КонецЕсли;
				ИнтервалДиаграммы = Диаграмма.ПолучитьЗначение(Точка, Серия).Добавить();
				ИнтервалДиаграммы.Начало = ИнтервалЗанятости.НачалоИнтервала;
				ИнтервалДиаграммы.Конец = КонецДня(ИнтервалЗанятости.КонецИнтервала);
				ИнтервалДиаграммы.Текст = "Занятость - " + Строка(ИнтервалЗанятости.ПроцентЗанятости) + "%";
				ИнтервалДиаграммы.Цвет = ВернутьЦветВСоответствииСЗанятостью(ИнтервалЗанятости.ПроцентЗанятости);
	//				ИнтервалДиаграммы.Значение.Редактирование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

//	МассивТочек = Диаграмма.Точки;
//	ТочкаНоль = МассивТочек.Получить(0);
КонецПроцедуры

&НаСервере
Функция ВернутьЦветВСоответствииСЗанятостью(Процент)
	Процент25 = Новый Цвет(218, 253, 186);
	Процент50 = Новый Цвет(154, 235, 163);
	Процент75 = Новый Цвет(69, 196, 176);
	Процент100 = Новый Цвет(19, 103, 138);
	Прошлое = WebЦвета.СветлоСерый;

	Если Процент > 0 И Процент <= 25 Тогда
		Возврат Процент25;
	ИначеЕсли Процент > 25 И Процент <= 50 Тогда
		Возврат Процент50;
	ИначеЕсли Процент > 50 И Процент <= 75 Тогда
		Возврат Процент75;
	ИначеЕсли Процент > 75 И Процент <= 100 Тогда
		Возврат Процент100;
	Иначе
		Возврат Прошлое;
	КонецЕсли;

КонецФункции
&НаКлиенте
Процедура ИнициализироватьДиаграммуГанта()

	ЗанятостьНаПроектеДиаграмма.Очистить();
	ЗанятостьНаПроектеДиаграмма.Обновление = Ложь;
	ЗанятостьНаПроектеДиаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	ЗанятостьНаПроектеДиаграмма.УстановитьПолныйИнтервал(Объект.ДатаНачала, Объект.ДатаОкончания);

	Диаграмма = ЗанятостьНаПроектеДиаграмма;

	ТекущаяДата = Дата(2025, 08, 23);

	Серия = Диаграмма.УстановитьСерию("Занятость");
	Серия.Текст = "Занятость";
	Серия.Цвет = Новый Цвет(19, 103, 138);

	ОбновитьТочкиИИнтервалы();
	
	//Метки
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;
	ЭлементМеток.ЛинииДелений = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	Метка = ЭлементМеток.Метки.Добавить(Объект.ДатаНачала);
	Метка.Текст = "Начало проекта";
	Метка.ЦветТекста = WebЦвета.Зеленый;
	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(Объект.ДатаНачала, Объект.ДатаНачала + 5 * 60 * 60);
	ВыделениеПроекта.Цвет = WebЦвета.Зеленый;

	Метка = ЭлементМеток.Метки.Добавить(ТекущаяДата);
	Метка.Текст = "СЕГОДНЯ";
	Метка.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
	Метка.ЦветЛинии = WebЦвета.СинийСоСтальнымОттенком;
//	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(ТекущаяДата, ТекущаяДата+24*60*60);
//	ВыделениеПроекта.Цвет = WebЦвета.СинийСоСтальнымОттенком;

	Метка = ЭлементМеток.Метки.Добавить(Объект.ДатаОкончания);
	Метка.Текст = "Окончание проекта";
	Метка.ЦветТекста = WebЦвета.ОранжевоКрасный;
	ВыделениеПроекта = Диаграмма.ИнтервалыФона.Добавить(Объект.ДатаОкончания, Объект.ДатаОкончания + 5 * 60 * 60);
	ВыделениеПроекта.Цвет = WebЦвета.ОранжевоКрасный;

	// Обновить диаграмму.
	Диаграмма.Обновление = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудниковИОтфильтроватьПоДолжности(Элемент, Должность, Владелец)
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	Элемент = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	Элемент.Использование = Истина;
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.ПравоеЗначение = Должность;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКД);

	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Владелец);
КонецПроцедуры

&НаСервере
Функция ВернутьДолжностьРуководительПроекта()
	Возврат Справочники.Должности.РуководительПроекта;
КонецФункции
#КонецОбласти

//&НаСервере
//Процедура ПроверкаПересеченияОдногоСотрудникаСГрафикомОтпусков(Сотрудник, МеткаПересечения)
//	//Запрос к регистру История Графика Отпусков
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
//	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
//	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
//	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
//	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
//	|ИЗ
//	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
//	|ГДЕ
//	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
//	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода
//	|	И ИсторияГрафикаОтпусковСрезПоследних.Сотрудник = &Сотрудник";
//	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
//	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
//	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Следующий();
//
//	Если Не Сотрудник = Выборка.Сотрудник Тогда
//		МеткаПересечения = Ложь;
//		Возврат;
//	КонецЕсли;
//
//	НачалоОтпуска = Выборка.ДатаНачалаОтпуска;
//	КонецОтпуска = Выборка.ДатаНачалаОтпуска + Выборка.КоличествоДней * 86400;
//	Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
//		МеткаПересечения = Истина;
//	Иначе
//		МеткаПересечения = Ложь;
//	КонецЕсли;
//
//КонецПроцедуры

//&НаСервере
//Процедура АктуализируемПериодГрафикаОтпусков()
//	//Запрос к документу График Отпусков
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ГрафикОтпусков.НачалоПериода КАК НачалоПериода,
//	|	ГрафикОтпусков.КонецПериода КАК КонецПериода
//	|ИЗ
//	|	Документ.ГрафикОтпусков КАК ГрафикОтпусков
//	|УПОРЯДОЧИТЬ ПО
//	|ГрафикОтпусков.Номер ВОЗР";
//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	ВыборкаДетальныеЗаписи.Следующий();
//	ГрафикОтпусковНачалоПериода = ВыборкаДетальныеЗаписи.НачалоПериода;
//	ГрафикОтпусковКонецПериода = ВыборкаДетальныеЗаписи.КонецПериода;
//КонецПроцедуры
//
//&НаСервере
//Процедура ПроверкаПересеченияСотрудниковСГрафикомОтпусков()
//	//Запрос к регистру История Графика Отпусков
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода,
//	|	ИсторияГрафикаОтпусковСрезПоследних.КонецПериода,
//	|	ИсторияГрафикаОтпусковСрезПоследних.Сотрудник,
//	|	ИсторияГрафикаОтпусковСрезПоследних.ДатаНачалаОтпуска,
//	|	ИсторияГрафикаОтпусковСрезПоследних.КоличествоДней КАК КоличествоДней
//	|ИЗ
//	|	РегистрСведений.ИсторияГрафикаОтпусков.СрезПоследних КАК ИсторияГрафикаОтпусковСрезПоследних
//	|ГДЕ
//	|	ИсторияГрафикаОтпусковСрезПоследних.НачалоПериода = &НачалоПериода
//	|	И ИсторияГрафикаОтпусковСрезПоследних.КонецПериода = &КонецПериода";
//	Запрос.УстановитьПараметр("НачалоПериода", ГрафикОтпусковНачалоПериода);
//	Запрос.УстановитьПараметр("КонецПериода", ГрафикОтпусковКонецПериода);
//	РезультатЗапроса = Запрос.Выполнить();
//	ТаблГрафикОтпусков = РезультатЗапроса.Выгрузить();
//
//	//Проверяем пересечения сотрудника в табл части с графиком отпусков
//	Для Каждого СтрокаТЧ Из Объект.КомандаПроекта Цикл
//		Для Каждого Запись Из ТаблГрафикОтпусков Цикл
//			Если Не СтрокаТЧ.Сотрудник = Запись.Сотрудник Тогда
//				Продолжить;
//			КонецЕсли;
//			НачалоОтпуска = Запись.ДатаНачалаОтпуска;
//			КонецОтпуска = Запись.ДатаНачалаОтпуска + Запись.КоличествоДней * 86400;
//			Если (Объект.ДатаНачала <= КонецОтпуска И Объект.ДатаОкончания >= НачалоОтпуска) Тогда
//				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Истина;
//			Иначе
//				СтрокаТЧ.ПересекаетсяЛиСГрафикомОтпусков = Ложь;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьИнтервалыВТаблЧасти()
//	Для Каждого Запись Из Объект.КомандаПроекта Цикл
//		Для Каждого Интервал Из Объект.ИнтервалыЗанятостиСотрудников Цикл
//			Если Запись.ИД = Интервал.ИД Тогда	
//				СтандарныйПериод = Новый СтандартныйПериод();	
//				СтандарныйПериод.ДатаНачала = Интервал.НачалоИнтервала;
//				СтандарныйПериод.ДатаОкончания = Интервал.КонецИнтервала;
//				Запись.ИнтервалыЗанятостиСписок.Добавить(СтандарныйПериод);
//			КонецЕсли;
//		КонецЦикла;		
//	КонецЦикла;
//КонецПроцедуры

////Заполняем табличную часть интервалами
//&НаКлиенте
//Процедура КомандаПроектаИнтервалыЗанятостиСписокПриИзменении(Элемент)
//	ТекДанные = Элементы.КомандаПроекта.ТекущиеДанные;
//
//	//Определяем старые записи и добавляем в массив
//	МассивНаУдаление = Новый Массив;
//	Для Каждого Запись Из Объект.ИнтервалыЗанятостиСотрудников Цикл
//		Если ТекДанные.ИД = Запись.ИД Тогда
//			МассивНаУдаление.Добавить(Запись);
//		КонецЕсли;
//	КонецЦикла;
//	
//	//Проходимся по массиву и удаляем старые записи
//	Для Каждого Запись Из МассивНаУдаление Цикл
//		Объект.ИнтервалыЗанятостиСотрудников.Удалить(Запись);
//	КонецЦикла;
//	
//	//Добавляем записи в новым идентификатором
//	ТекДанные.ИД = Новый УникальныйИдентификатор;
//	Для Каждого Интервал Из ТекДанные.ИнтервалыЗанятостиСписок Цикл
//		НоваяЗапись = Объект.ИнтервалыЗанятостиСотрудников.Добавить();
//		НоваяЗапись.НачалоИнтервала = Интервал.Значение.ДатаНачала;
//		НоваяЗапись.КонецИнтервала = Интервал.Значение.ДатаОкончания;
//		НоваяЗапись.ИД = ТекДанные.ИД;
//	КонецЦикла;
//
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗанятостьНаПроектеДиаграммаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
////	СтандартнаяОбработка = Ложь;
//	ПараметрыФормы = Новый Структура;
//	СтандартныйПериод = Новый СтандартныйПериод;
//	
//	//Создаем новый интервал
//	Если Значения.Количество() = 0 Тогда
//		СтандартныйПериод.ДатаНачала = Объект.ДатаНачала;
//		СтандартныйПериод.ДатаОкончания = Объект.ДатаОкончания;
//		ПараметрыФормы.Вставить("ИнтервалПарам", СтандартныйПериод);
//		ОписаниеОповещения = Новый ОписаниеОповещения(
//			"ВозвратЗначенийИзФормыВыбораВДиаграмму", 
//			ЭтотОбъект, ,
//			"СообщитьОбОшибке",
//			ЭтотОбъект);
//		ОткрытьФорму("Документ.Проекты.Форма.ФормаВыбораИнтервала", ПараметрыФормы, Элемент, , , , ОписаниеОповещения, );
//		Возврат;
//	КонецЕсли;
//
//	
//
////	СтандартныйПериод.ДатаНачала = Значения[1].Начало;
////	СтандартныйПериод.ДатаОкончания = Значения[1].Конец;
////	ПараметрыФормы.Вставить("ИнтервалПарам", СтандартныйПериод);
////	ОткрытьФорму("Документ.Проекты.Форма.ФормаВыбораИнтервала", ПараметрыФормы, Элемент);
//КонецПроцедуры

//&НаКлиенте
//Процедура ВозвратЗначенийИзФормыВыбораВДиаграмму(Массив, Параметр) Экспорт
//	Значение = Массив;
//КонецПроцедуры
